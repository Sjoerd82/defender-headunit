#!/bin/bash
# ---------------------------------------------------------------------------
#
# This script does not mount the USB drive, this should be handled outside of
# the script.

# capture CTRL+C, CTRL+Z and quit singles using the trap
trap '' SIGINT
trap '' SIGQUIT
trap '' SIGTSTP

typeset -a arSource=(fm mpc bt alsa)
typeset -a arSourceAvailable=(1 1 1 1)
typeset -i iSourceArrayLen=3
typeset -i iSource=-1
#USB
typeset -r sMountPoint="/home/venemasrg"
#typeset sMpcDir="/"
typeset -a arDirStruct
typeset -i iDirectory=0
typeset -i iDirectoryArrayLen
#ALSA
typeset -i iVolume=50
typeset params_amixer="" #-c card -D device, etc.
#MPC
typeset params_mpc=""
typeset -i bRandom=0
#FM
typeset params_fm=""
typeset -i bPlayingFM=0
typeset -i bPlaying=0
typeset -i bUSBMounted=0

check_alsa(){
	echo "Checking ALSA, and playing sound"
	aplay -vv welcome.wav
}

check_mount_usb(){
	#USB is auto-mounted
	echo "Check if USB drive is mounted"
	#todo

	if mount | grep $sMountPoint0 > /dev/null; then
		echo "USB drive seems to be mounted."
		bUSBMounted=1
	else
		echo "No USB drive mounted."
		bUSBMounted=0
		return 1
	fi

	#Get UUID
	blkid -o value $sMountPoint

	return 0
}

get_settings(){
	echo "Retrieving settings"
#volume
#source
#directory (only use if it matches with dir. name - or - find dir name on same usb drive)
#fm freq
#mode (shuffle)

}

volume_up(){
	echo "Volume up"
        if [ "${iVolume}" -lt 100 ]; then
                iVolume=$iVolume+1
        fi
	echo "Setting volume to: ${iVolume}"
	amixer $params_amixer set "Master d" $iVolume; amixer $params_amixer set PCM $iVolume unmute
}

volume_down(){
	echo "Volume down"
        if [ "${iVolume}" -gt 0 ]; then
                iVolume=$iVolume-1
        fi
        echo "Setting volume to: ${iVolume}"
        amixer $params_amixer set "Master d" $iVolume; amixer $params_amixer set PCM $iVolume unmute
}

## FM #######

fm_play(){
	echo "FM play"
	bPlayingFM=1
}

fm_pause(){
	echo "FM pause"
	bPlayingFM=0
	#fm has no "pause" -> stopping
}

fm_play_pause() {
	echo "Toggling FM"

        case $bPlayingFM in
        0) fm_play;;
        1) fm_pause;;
        esac

	echo "FM player state is now: ${bPlayingFM}"
}

fm_next(){
	echo "FM Next Station"
}

fm_prev(){
	echo "FM Prev Station"
}

bt_play(){
	echo "BT play"
}

linein_play(){
	echo "Play line-in"
}

## MPC ######

mpc_init(){
	local ret

        echo "Check if usb is mounted"
	ret=check_mount_usb
	if [ "$ret" == 1 ]; then
		echo "USB not mounted. Stopping."
	else
		echo "USB mounted OK"
	fi	
	
        echo "Stopping mpd"
        #todo
        echo "Deleting database"
        #todo --  only if different UUID
        #todo
        echo "Starting mpd"
        #todo

        echo "Check if mpd is running"
        #todo

	echo "Start mpc update"
	mpc --wait $params_mpc update

        arSourceAvailable[1]=0

	arDirStruct=( $(find ${sMountPoint}/. -type d -printf '%P\n' | sort) )
	#arDirStruct[0]="${sMountPoint}/."
	iDirectoryArrayLen=(${#arDirStruct[@]}-1)
	echo $iDirectoryArrayLen
	echo "${arDirStruct[0]}"
        echo "${arDirStruct[1]}"
        echo "${arDirStruct[2]}"

	return 0;
}

mpc_play(){
	echo "Play mpc"

	# if playlist is empty, start by playing the root

	sMpcDir="."	

}

mpc_stop(){
	echo "Stopping mpc playback"
	mpc $params_mpc stop
}

mpc_play_pause(){
	echo "Toggling mpc play/pause"
	mpc $params_mpc toggle
}

mpc_next(){
	echo "Next track"
	mpc $params_mpc next
}

mpc_prev(){
	echo "Previous track"
	mpc $params_mpc prev
}

mpc_random_on(){
	echo "Setting random modei on (MPC)"
	#todo: load all
	mpc $params_mpc random on
}

mpc_random_off(){
	echo "Turning random mode off (MPC)"
	#todo: ?
	mpc $params_mpc random off
}

mpc_random_toggle(){
	echo "Toggeling Random"
	
}

mpc_play_folder(){
        echo "Loading: ${arDirStruct[$iDirectory]}"

	mpc $params_mpc clear #crop? - to continue playing?

	# ONLY LOAD REQUESTED FOLDER (and check for status via idle/idleloop)
        #mpc $params_mpc ls ${arDirStruct[$iDirectory]} | mpc $params_mpc add

	# -or- LOAD EVERYTHING FROM THIS FOLDER ONWARDS..
	mpc $params_mpc repeat on #todo, does this repeat the track or the playlist?
	for ((i=${iDirectory}; i < ${#source}; i++))
	do
		mpc $params_mpc ls ${arDirStruct[$iDirectory]} | mpc $params_mpc add
	done
	# Add whatever is before the selected folder on the end of the playlist to have a complete playlist of the USB drive
	for ((i=0; i < ${iDirectory}; i++))
        do
                mpc $params_mpc ls ${arDirStruct[$iDirectory]} | mpc $params_mpc add
        done

	# ALTERNATIVELY, create an indexed list of position in playlist for every directory in the arDirStruct, so you can simply jump to that position.

	# Start playing new folder
	mpc $params_mpc play 1

}

mpc_next_folder(){
	echo "Next folder"

	#${#arDirStruct[@]}-1
        if [ "${iDirectory}" -lt $iDirectoryArrayLen ]; then
	#echo (${#arDirStruct[@]}-1)
        #if [ $iDirectory -lt (${#arDirStruct[@]}-1) ]; then
                iDirectory=$iDirectory+1
	else
		iDirectory=0
	fi
	echo "Now active: ${arDirStruct[$iDirectory]}"
	mpc_play_folder
}

mpc_prev_folder(){
	echo "Prev folder"
	if [ "${iDirectory}" -ge 1 ]; then
	        iDirectory=$iDirectory-1
	else
		iDirectory=${#arDirStruct[@]}-1
	fi
        echo "Now active: ${arDirStruct[$iDirectory]}"
        mpc_play_folder
}

mpc_check(){
	if [ "$bUSBMounted" -eq "1" ]; then
		return 0
	fi
	return 1
}

play_pause(){
	echo "Toggling Play/Pause"
	case $iSource in
        0) fm_play_pause;;
        1) mpc_play_pause;;
        *) echo "Not Supported";;
        esac
}

next(){
	case $iSource in
	0) fm_next;;
	1) mpc_next;;
	*) echo "Not Supported";;
	esac
}

prev(){
        case $iSource in
        0) fm_prev;;
        1) mpc_prev;;
        *) echo "Not Supported";;
        esac
}

source_play(){
        # Check if sources available
        if [ "$iSource" = -1 ]; then
                echo "No sources available."
                return 1
        fi

	case $iSource in
	0) fm_play;;
	1) mpc_play;;
	2) bt_play;;
	3) linein_play;;
	*) echo "Unknown source";;
	esac
}

check_source(){
	echo "Checking sources"

	
	#todo
	arSourceAvailable[0]=0
	arSourceAvailable[1]=$(mpc_check)
	arSourceAvailable[2]=1
	arSourceAvailable[3]=1

	# Order
	for (( i=3; i>=0; i--))
	do
		if [ "${arSourceAvailable[$i]}" == 0 ]; then
			echo "${arSource[$i]}:	available." 
			iSource=$i
		else
			echo "${arSource[$i]}:	not available."
		fi
	done

	if [ "$iSource" = -1 ]; then
		echo "No sources available"
	else
		echo "Source set to: ${arSource[$iSource]}"
	fi
}

source_next(){
	echo ""
	local iSourceCount=0
	local a=$iSource

	# Check if sources available
	if [ "$iSource" = -1 ]; then
		echo "No sources available."
		return 1
	fi

	echo "Switching from ${arSource[$iSource]}"
	for (( i=0; i<=3; i++))
	do
	        if [ "$iSource" = "$iSourceArrayLen" ]; then
        	        iSource=0
	        else
        	        iSource=$iSource+1
	        fi
	
		if [ "${arSourceAvailable[$iSource]}" == 0 ]; then
			echo "Switching to ${arSource[$iSource]}"
			return 0
		fi
	done
	
	#stop all sources and play active source
	fm_stop
	mpc_stop
	source_play
}

mode_change(){
	#only Random on/off, currently, and only for mpc
	echo "Toggeling random mode"

        case $iSource in
        1) mpc_random_toggle;;
        *) echo "Not Supported";;
        esac
}

init(){
	echo "Initializing"
	check_alsa
	check_source
	mpc_init
	#get_state
	source_play

	# Play/Pause button may not be implemented on control panel,
	# therefore, always try to play if a source becomes avaiable.

	echo "Initialization finished"

}

 
init
while :
do
	# show menu
	#clear
        echo "1. Next Source"
        echo "2. Play / Pause"
        echo "3. Next track (USB) / station (Radio)"
        echo "4. Prev track (USB) / station (Radio)"
        echo "5. Volume up"
        echo "6. Volume down"
        echo "7. Folder up (USB)"
        echo "8. Folder down (USB)"
	echo "9. Mode: Shuffle (all) / Normal"
        echo "0. Exit"
	echo "---------------------------------"
	read -r -N 1 -p "Enter your choice [0-8] : " c
	# take action
	case $c in
		1) source_next;;
		2) play_pause;;
		3) next;;
		4) prev;;
		5) volume_up;;
		6) volume_down;;
		7) mpc_prev_folder;;
		8) mpc_next_folder;;
		9) mode_change;;
		0) break;;
		*) Pause "Select between 0 to 8 only"
	esac
done

