from modules.dispatcher import *

def my_func1():
	print "func 1"

def my_func2():
	print "func 2"
	
#dispatcher()

def strint_to_bool(value):
	if isinstance(value, str) and value.lower() in ['true','on','1','t']:
		return True
	elif  isinstance(value, str) and value.lower() in ['false','off','0','f']:
		return False
	elif  isinstance(value, int) and value in [1]:
		return True
	elif  isinstance(value, int) and value in [0]:
		return False
	else:
		return None
  
def validate_args(arg_defs,args):
	for i, arg in enumerate(args):
		"""
		print "--------------------------------------------"
		print "Processing argument {0}: {1}".format(i,arg)
		print "Definition: {0}".format(arg_defs[i])
		print "--------"
		"""
		# datatype
		if isinstance(arg, arg_defs[i]['datatype']):
			#print "Datatype: PASS"
			pass
		else:
			if arg_defs[i]['datatype'] == bool and strint_to_bool(arg) is not None:
				#print "Datatype: PASS (converted to bool)"
				args[i] = strint_to_bool(arg)
			else:
				print "Datatype: FAIL"
				return None
				
	if len(arg_defs)-len(args) > 0:
		for arg_def in arg_defs[len(args):len(arg_defs)]:
			args.append(arg_def['default'])

	# everything OK
	return args
		
		

def mode_set(args,data):
		arg_defs = []
		arg0 = {
					'name': 'mode',
					'datatype': str,
					'required': True
		}
		arg1 = {
					'name': 'state',
					'datatype': bool,		# will auto-convert str and int, if it makes sense
					'required': False,
					'default': False
		}
		arg_defs.append(arg0)
		arg_defs.append(arg1)
		ret = validate_args(arg_defs,args)
		print ret

def mode_X(args,data):
		arg_defs = []
		# args are "mode,state" pairs
		for i in range(0,len(args),2):
			print i
			arg0 = {
						'name': 'mode',
						'datatype': str,
						'required': True
			}
			arg1 = {
						'name': 'state',
						'datatype': bool,
						'required': False,
						'default': False
			}
			arg_defs.append(arg0)
			arg_defs.append(arg1)

		ret = validate_args(arg_defs,args)
		print ret
		
test_args = ['menu']
mode_set(test_args,None)

test_args = ['menu','t','player']
mode_X(test_args,None)


a = "True"
b = 1
print 